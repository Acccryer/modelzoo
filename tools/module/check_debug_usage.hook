import sys
import subprocess
import os
import logging
from pathlib import Path
import re
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(name)s -   %(message)s',
    datefmt='%m/%d/%Y %H:%M:%S',
    level=logging.INFO)
logger = logging.getLogger(__name__)


def get_modelzoo_dir():
    current_dir = os.path.dirname(os.path.abspath(__file__))
    while True:
        parent_dir = os.path.dirname(current_dir)
        if parent_dir.split("/")[-1] == "modelzoo":
            current_dir = parent_dir
            break
        current_dir = parent_dir
    return current_dir


def run_cmd(cmd):
    results = subprocess.run(cmd, stdout=subprocess.PIPE,
                             shell=True).stdout.decode('utf-8').split("\n")
    return results


def is_python_file(filename):
    """
    判断文件是否为 Python 文件
    """
    return os.path.splitext(filename)[1] == '.py'



def check_files():
    FLAG = 0

    added_files = []
    # git add中新添加的文件
    uncommit_new_file_cmd = f"git diff --name-status HEAD~1 HEAD | grep '^A' | awk '{{print $2}}' | xargs realpath"
    uncommit_new_files = run_cmd(uncommit_new_file_cmd)
    for file in uncommit_new_files:
        if file and is_python_file(file):
            added_files.append(file)

    pattern1 = r"^(?!\s*#)\s*import pdb;"
    pattern2 = r"^(?!\s*#)\s*breakpoint()"
    files_with_pdb=[]
    files_with_breakpoint=[]
    for file in added_files:
        with open(file,"r") as f:
            content=f.read()
        match1=re.search(pattern1,content)
        if match1:
            FLAG=1
            files_with_pdb.append(file)
        match2=re.search(pattern2,content)
        if match2:
            FLAG=1
            files_with_breakpoint.append(file)
    if FLAG:
        if files_with_pdb:
           for i in files_with_pdb:
               print(f"{file} contain pdb!")
        if files_with_breakpoint:
           for i in files_with_breakpoint:
               print(f"{file} contain breakpoint()!")

    return FLAG


if __name__ == '__main__':
    exit(check_files())
