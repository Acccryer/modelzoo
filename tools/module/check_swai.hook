import sys
import subprocess
import os
import logging
from pathlib import Path
import re
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(name)s -   %(message)s',
    datefmt='%m/%d/%Y %H:%M:%S',
    level=logging.INFO)
logger = logging.getLogger(__name__)


def get_modelzoo_dir():
    current_dir = os.path.dirname(os.path.abspath(__file__))
    while True:
        parent_dir = os.path.dirname(current_dir)
        if parent_dir.split("/")[-1] == "modelzoo":
            current_dir = parent_dir
            break
        current_dir = parent_dir
    return current_dir


def run_cmd(cmd):
    results = subprocess.run(cmd, stdout=subprocess.PIPE,
                             shell=True).stdout.decode('utf-8').split("\n")
    return results


def is_python_file(filename):
    """
    判断文件是否为 Python 文件
    """
    return os.path.splitext(filename)[1] == '.py'



def check_files():
    FLAG = 0
    added_files = []
    # git add file(add/motify)
    uncommit_new_file_cmd = f"git diff --name-status HEAD~1 HEAD | grep '^[MA]' | awk '{{print $2}}' | xargs realpath"
    uncommit_new_files = run_cmd(uncommit_new_file_cmd)
    for file in uncommit_new_files:
        if file :
            added_files.append(file)
    included_file=('.py', '.sh', '.md', '.json', '.6B', '.yaml', '.yml', '.log', '.cpp', '.c','.txt')
    failed_files=[]
    for file in added_files:
        if "modelzoo/tools" not in file: # not check self
            if file.endswith(included_file) or os.path.basename(file) == 'Dockerfile': #
                with open(file,"r") as f:
                    lines=f.readlines()
                for l,line in enumerate(lines):
                    if "swai" in line.lower():
                        FLAG=1
                        failed_files.append([file,l])

    if failed_files:
        for i in failed_files:
            print(f"File {i[0]}, line {i[1]+1}, contain 'swai' !")
    return FLAG


if __name__ == '__main__':
    exit(check_files())
