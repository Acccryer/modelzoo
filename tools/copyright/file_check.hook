import sys
import subprocess
import os
import logging
from pathlib import Path
from license_content import *

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(name)s -   %(message)s',
    datefmt='%m/%d/%Y %H:%M:%S',
    level=logging.INFO)
logger = logging.getLogger(__name__)

added_py_content = get_added_py_content()
added_c_content = get_added_c_content()
modified_c_content = get_modified_c_content()
modified_py_content = get_modified_py_content()


def get_modelzoo_dir():
    current_dir = os.path.dirname(os.path.abspath(__file__))
    while True:
        parent_dir = os.path.dirname(current_dir)
        if parent_dir.split("/")[-1] == "modelzoo":
            current_dir = parent_dir
            break
        current_dir = parent_dir
    return current_dir


def run_cmd(cmd):
    results = subprocess.run(cmd, stdout=subprocess.PIPE,
                             shell=True).stdout.decode('utf-8').split("\n")
    return results


def is_python_file(filename):
    """
    判断文件是否为 Python 文件
    """
    return os.path.splitext(filename)[1] == '.py'


def is_c_file(filename):
    """
    判断文件是否为 C/C++ 文件
    """
    ext = os.path.splitext(filename)[1]
    return ext == '.c' or ext == '.cpp'


import os
import subprocess
import sys

def check_new_directory():
    # 获取git diff
    cmd1="git ls-tree -r --name-only HEAD~1 | grep -E '^(PaddlePaddle|PyTorch)/[^/]+/[^/]+/[^/]+' | awk -F'/' '{print $1 \"/\" $2 \"/\" $3}' | sort | uniq"
    result = subprocess.check_output(cmd1, shell=True, stderr=subprocess.STDOUT)
    prev_dir = set(result.decode('utf-8').split('\n')[:-1])


    cmd2="git ls-tree -r --name-only HEAD | grep -E '^(PaddlePaddle|PyTorch)/[^/]+/[^/]+/[^/]+' | awk -F'/' '{print $1 \"/\" $2 \"/\" $3}' | sort | uniq"
    result = subprocess.check_output(cmd2, shell=True, stderr=subprocess.STDOUT)
    cur_dir = set(result.decode('utf-8').split('\n')[:-1])
    return cur_dir-prev_dir



def check_files():
    if check_new_directory():
        return 0
    FLAG = 0
    added_files = []

    uncommit_new_file_cmd = f"git diff --name-status HEAD~1 HEAD | grep '^A' | awk '{{print $2}}' | xargs realpath"
    uncommit_new_files = run_cmd(uncommit_new_file_cmd)
    for file in uncommit_new_files:
        if file and (is_c_file(file) or is_python_file(file)):
            added_files.append(file)

    # 对于新写的文件，添加文件头
    for file_name in added_files:
        with open(file_name, 'r') as file:
            content = file.read()
            if "PyTorch" in file_name or "PaddlePaddle" in file_name:
                if is_c_file(file_name):
                    if added_c_content not in content and modified_c_content not in content:
                        logger.info(f'ADDED: File {file_name} need add LICENSE')
                        FLAG = 1
                else:
                    if added_py_content not in content and modified_py_content not in content:
                        logger.info(f'ADDED: File {file_name} need add LICENSE')
                        FLAG = 1

    return FLAG


if __name__ == '__main__':
    exit(check_files())
